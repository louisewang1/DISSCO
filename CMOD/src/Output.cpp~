/*
CMOD (composition module)
Copyright (C) 2005  Sever Tipei (s-tipei@uiuc.edu)
                                                                                
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
                                                                                
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
                                                                                
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#include "Output.h"
#include "Note.h"
#include "Note.cpp"

OutputNode* Output::top;
ofstream* Output::particelFile;
int Output::level;

OutputNode::OutputNode(string name) : nodeName(name) {
}

OutputNode::~OutputNode()
{
  for(int i = 0; i < (int)subNodes.size(); i++)
    delete subNodes[i];
  propertyNames.clear();
  propertyValues.clear();
  propertyUnits.clear();
  subNodes.clear();
}


//----------------------------------------------------------------------------//

bool OutputNode::isBottom(void) {
  return (nodeName[0] == 'B' && nodeName[1] == '/');
}


//----------------------------------------------------------------------------//

bool OutputNode::isNote(void) {
  return (nodeName == "Note");
}


//----------------------------------------------------------------------------//

bool OutputNode::isBuildPhase(void) {
  string n = nodeName;
  return (n == "Sweep" || n == "Continuum" || n == "Discrete");
}


//----------------------------------------------------------------------------//

void OutputNode::addProperty(string name, string value, string units)
{
  propertyNames.push_back(name);
  propertyValues.push_back(value);
  propertyUnits.push_back(units);
}


//----------------------------------------------------------------------------//
// find "name" in all properties and return its value
string OutputNode::getProperty(string name) {
  for(unsigned int i = 0; i < propertyNames.size(); i++)
    if(sanitize(propertyNames[i]) == sanitize(name))
      return propertyValues[i];
  return "";
}


//----------------------------------------------------------------------------//

string OutputNode::getXML(void) {
  string s;
  s += "<";
  s += sanitize(nodeName);
  s += ">\n";
  
  for(int i = 0; i < propertyNames.size(); i++) {
    s += "<";
    s += sanitize(propertyNames[i]);
    s += ">";
    
    s += propertyValues[i];
    
    s += "</";
    s += sanitize(propertyNames[i]);
    s += ">\n";      
  }
  
  for(int i = 0; i < subNodes.size(); i++) {
    if(subNodes[i]->isBuildPhase())
      continue;
    s += subNodes[i]->getXML();     
  }
  
  s += "</";
  s += sanitize(nodeName);
  s += ">\n";
  return s;
}


//----------------------------------------------------------------------------//
// move data in subNodes to fomusdata, each bottom event corresponding to one element in the vector

void OutputNode::getFOMUS(vector<Tempo>& tempos, vector<string>& fomusdata) {  
  if(!isBottom()) {
    for(int i = 0; i < subNodes.size(); i++) {
      if(subNodes[i]->isBuildPhase())
        continue;
      subNodes[i]->getFOMUS(tempos, fomusdata);  //recursion until reach bottom event   
    }
    return;
  }
  else {
	// set up tempo
    Tempo t;
    t.setStartTime(atof(getProperty("TempoStartTime").c_str()));
    t.setTimeSignature(getProperty("TimeSignature"));
    t.setEDUPerTimeSignatureBeat(getProperty("Divisions"));
    string s;
    s.append(getProperty("TempoBeat"));
    s.append("=");
    s.append(getProperty("Tempo"));
    t.setTempo(s);

	//set up fomusdata (time, duration, pitch)
    string n;
    for(unsigned int i = 0; i < subNodes.size(); i++) {
      if(!subNodes[i]->isNote())
        continue;
      Ratio div = t.getEDUPerTimeSignatureBeat();
      Ratio start = subNodes[i]->getProperty("EDUStartTime");
      Ratio dur = subNodes[i]->getProperty("EDUDuration");
      Ratio pitch = subNodes[i]->getProperty("PitchNumber");
      pitch += Ratio(12, 1);
      n.append("time ");
      n.append((start / div).toString());
      n.append(" dur ");
      n.append((dur / div).toString());
      n.append(" pitch ");
      n.append(pitch.toPrettyString());
      n.append(";\n");
    }
    tempos.push_back(t);
    fomusdata.push_back(n);
  }
}


//----------------------------------------------------------------------------//

string OutputNode::findAndReplace(string in, string needle, string replace) {
  while(in.find(needle) != string::npos)
    in.replace(in.find(needle), needle.length(), replace);
  return in;
}


//----------------------------------------------------------------------------//
//sanitize - remove illegal symbols

string OutputNode::sanitize(string name) {
  name = findAndReplace(name, " ", "");
  name = findAndReplace(name, "/", "_");
  return name;
}


//----------------------------------------------------------------------------//

void Output::writeLineToParticel(string line) {
  if(!particelFile) return;
  *particelFile << line << endl;
}


//----------------------------------------------------------------------------//

string Output::getLevelIndentation(bool isProperty, bool isEndLevel) {
  string indentation;
  for(int i = 0; i < level; i++)
    if(isProperty || isEndLevel || i < level - 1)
      indentation = indentation + "| ";
    else
      indentation = indentation + "+-";
  return indentation;
}
  

//----------------------------------------------------------------------------//

string Output::getPropertyIndentation(void) {
  return getLevelIndentation(true, false) + ". ";
} 


//----------------------------------------------------------------------------//

void Output::initialize(string particelFilename) {
  top = 0;
  particelFile = 0;
  level = -1;
  
  if(particelFilename != "") {
    particelFile = new ofstream();
    particelFile->open(particelFilename.c_str());
  }
}


//----------------------------------------------------------------------------//

void Output::free(void)
{
  delete top;
  delete particelFile;
}


//----------------------------------------------------------------------------//

OutputNode* Output::getCurrentLevelNode(void) {
  if(!top)
    return 0;
    
  OutputNode* currentNode = top;
  for(int i = 1; i <= level; i++)
    currentNode = currentNode->subNodes.back();
  return currentNode;
}


//----------------------------------------------------------------------------//

void Output::beginSubLevel(string name) {
  if(!top)
    top = new OutputNode(name);
  else
    getCurrentLevelNode()->subNodes.push_back(new OutputNode(name));
  level++;
  
  //Immediately write level to particel.
  writeLineToParticel(getLevelIndentation(false, false) + 
    getCurrentLevelNode()->nodeName);
}


//----------------------------------------------------------------------------//

void Output::addProperty(string name, string value, string units) {
  OutputNode* current = getCurrentLevelNode();
  if(!current)
    cerr << "Warning: Top level does not exist. Property can not be added."
      << endl;
  else
    current->addProperty(name, value, units);
  
  //Immediately write property to particel.
  string stringToWrite = getPropertyIndentation() + name + ": " + value;
  if(units != "")
    stringToWrite = stringToWrite + " " + units;
  writeLineToParticel(stringToWrite);
}


//----------------------------------------------------------------------------//

void Output::endSubLevel(void) {
  //Before closing level immediately write to particel.
  writeLineToParticel(getLevelIndentation(false, true) + "End " + 
    getCurrentLevelNode()->nodeName);
  level--;
}


//----------------------------------------------------------------------------//

void Output::exportToXML(string filename) {
  ofstream* xmlFile;
  if(filename == "")
    return;
  xmlFile = new ofstream();
  xmlFile->open(filename.c_str());
  *xmlFile << top->getXML();
}


//----------------------------------------------------------------------------//

void Output::exportToFOMUS(string filenamePrefix) {
  if(filenamePrefix == "")
    return;
  vector<Tempo> tempos;
  vector<string> fomusData;
  top->getFOMUS(tempos, fomusData);// get the data for tempos and formusData
  while(tempos.size() > 0) {
    stringstream ss_stem;
    float ttime = tempos[0].getStartTime();
    ss_stem << filenamePrefix << ttime << "s";
    string fmsFile = ss_stem.str() + ".fms";
    string lyFile = ss_stem.str() + ".ly";
    string pdfFile = ss_stem.str() + ".pdf";
    string svgFile = ss_stem.str() + ".svg";
    
    string currentFOMUSData = fomusData[0];
    /*For all of the FOMUS data that has equivalent tempo, merge them to the
    same FOMUS file.*/
    Tempo t = tempos[0];
    for(unsigned int i = 1; i < tempos.size(); i++) {
      if(tempos[0].isTempoSameAs(tempos[i])) {
        if(fomusData[i].size() > 0) {
          currentFOMUSData.append("/////////////////////////////////////\n");
          currentFOMUSData.append(fomusData[i]);
        }
        tempos.erase(tempos.begin() + i);
        fomusData.erase(fomusData.begin() + i);
        i--;
      }
    }
    tempos.erase(tempos.begin());
    fomusData.erase(fomusData.begin());
    
    if(currentFOMUSData.size() > 0) {
      string FOMUSHeader;
      stringstream tempoTime;
      int min = (int)(ttime / 60.f);
      float sec = (ttime - min * 60.f);
      
      tempoTime << t.getTempoBeat().toPrettyString() << "=" <<
        t.getTempoBeatsPerMinute().toPrettyString();
      tempoTime << " at " << min << ":";
      if(sec < 10.f)
        tempoTime << "0";
      tempoTime << sec;
      
      Ratio r = t.getTimeSignature();
      FOMUSHeader.append("//Header\n");
      FOMUSHeader.append("title \"");
      FOMUSHeader.append(tempoTime.str());
      FOMUSHeader.append("\"\n");
      FOMUSHeader.append("time 0 |timesig ( ");
      Ratio rn = r.Num();
      Ratio rd = r.Den();
      FOMUSHeader.append(rn.toPrettyString());
      FOMUSHeader.append(" ");
      FOMUSHeader.append(rd.toPrettyString());
      FOMUSHeader.append(" )|\n");
      FOMUSHeader.append("\n//Notes\n");
      
      {
      ofstream fomusFile;
      fomusFile.open(fmsFile.c_str());
      fomusFile << FOMUSHeader;
      fomusFile << currentFOMUSData;
      }
      
      {
      string fomusToLilypond = "fomus -i ";
      fomusToLilypond += fmsFile;
      fomusToLilypond += " -o ";
      fomusToLilypond += lyFile;
      system(fomusToLilypond.c_str());
      }
      
      {
      string pdfToSVG = "pdf2svg ";
      pdfToSVG += pdfFile;
      pdfToSVG += " ";
      pdfToSVG += svgFile;
      system(pdfToSVG.c_str());
      }
      /*
      {
        string firsvg = "firefox ";
        firsvg.append(svgFile);
        firsvg.append(" &");
        system(firsvg.c_str());
      }
      */
    }
  }
}


//======================================================
void verify_time(int &time1, int & time2, string loud){
  int i;
  int f = 1;
  int diff = time2 - time1;
  cout << "diff is " << diff << "   beatEDUs is " << beatEDUs << endl; 
  if (diff > beatEDUs) f = 0;
  for (i = 0; i<13; i++)
	if (valid_time[i] == diff)
	   f = 0;
  if (f == 1){
    cout << "modifiying start time ........" << endl;
    int rem1 = time1 % beatEDUs;
    int div = time1 / beatEDUs;
    int rem2 = time2 % beatEDUs;
    Rational<int> r(rem1, beatEDUs);
    int den = r.Den();
    int factor = beatEDUs / den;
    int temp = factor;
    while (temp < rem2)
	temp += factor;
    if (temp - factor > rem1)
	temp -= factor;
    time2 = div * beatEDUs + temp;
  }

  if (time2-time1 > 0){
 	 Note * t = new Note();
 	 t->pitch_out = "r";
 	 t->start_t = time1;
 	 t->end_t = time2;
 	 t->loudness_out = loud;
  	 t->notate();
  }

}




/*======================================================
void make_valid()
description: this function is to check if the gap between two notes(dur of a rest sign) is valid. If not, we will modify the beginning time of the second note first, and try to make it valid. Then convert each note to its corresponding notation
-shenyi
=======================================================*/
void make_valid(){
  vector<Note*>::iterator it;
  Note * prev = *(all_notes_orig.begin());
  Note * cur;
  //prev->notate();
  for (it = all_notes_orig.begin()+1; it!=all_notes_orig.end(); it++){ 
        cur = *it;
	sBeat = cur->start_t / beatEDUs;
	eBeat = cur->end_t / beatEDUs;
	cout << "cp2: " << prev->end_t << " " << cur->start_t << endl;
	verify_time(prev->end_t, cur->start_t, prev->loudness_out);
	cout << "cp3: " << prev->end_t << " " << cur->start_t << endl;
	//cur->notate();
	prev = cur;
  }
  for (it = all_notes_orig.begin(); it!=all_notes_orig.end(); it++){
	cur = *it;	
	cur->notate();
  }
}



/* ====================================================
void output_score()
output all notes to written score
--shenyi
=======================================================*/
void output_score(){
  /* some variables */
  ofstream * fout; //output filestream
  Note* cur; // note pointer point to current note
  Note* next;
  string out_str; //string to hold output data
  string loudness_prev = ""; //store previous loudness
  int prev_time = 0; // store starting time of previous note
  int tuplet_s_t = 0; //store start EDU of tuplet
  int dur_rest;
  string rest;
  string chord_out;
  int tuplet = 0; //tuplet flag
  int chord = 0; //chord flag
  Rational<int> temp; // temporary variable for print
  int t;

  make_valid();

  /* open the file stream and output the beginning */
  fout = new std::ofstream;
  fout->open("whole_score.ly");
  *fout << "{" << endl;

  vector<Note*>::iterator it; //iterator
  it = all_notes.begin();

  /* iterate through the vector of all notes pointers */
  while (it!=all_notes.end()){
	cur = *it;
	if ((it+1)!= all_notes.end())
	   next = *(it + 1);
	else next = NULL;
/*
	if (cur->split == 1){
	   *fout << cur->type_out;
	   if (cur->tuplet == 1) tuplet = 1;
	   prev_time = cur->end_t;
	   it ++;
	   continue;
	} */
	//check for right bracket
	if (cur->tuplet == 0 )
	   if (tuplet ==1 ){
		tuplet = 0;
		*fout << " }  " ;
	   }	
	if (tuplet==1 && cur->start_t >= tuplet_s_t + beatEDUs){
	   tuplet = 0;
	   *fout << " } ";
	}

	// check for chord
	/*
	if (chord == 1 && next!=NULL)
	   if (next->start_t != cur->start_t){
		chord = 0;
	//	*fout << ">";
	   }  */


	//type and pitch
	if (cur->tuplet == 1)
		if (tuplet == 0){
			tuplet = 1;
			tuplet_s_t = cur->start_t;
			*fout << "\\tuplet ";
			*fout << cur->tuplet_name << " { ";
		}

	// check for rest sign
/*	if (cur->start_t>prev_time){
		dur_rest = cur->start_t - prev_time;
		rest = restsign_dur_to_type(prev_time, cur->start_t, dur_rest, tuplet, tuplet_s_t);
		*fout << rest << " ";
	} */
		
	*fout << cur->pitch_out << cur->type_out;
	//if (cur->split ==1) *fout << "~";
	//*fout << " ";       
	

	//check for chords
/*
	if (chord == 0 && next!=NULL)
   	   if (next->start_t == cur->start_t){
		chord = 1;
	//	*fout << "<" << chord_out << " ";
	   }  */


	//loudness
	if (cur->loudness_out != loudness_prev && chord == 0){
			*fout << cur->loudness_out;
			loudness_prev = cur->loudness_out;
	}
	if (cur->split ==1) *fout << "~";

	//if (chord ==1 ) chord_out = cur->type_out;
	*fout << " ";
	prev_time = cur->end_t;
	it ++;
  }

  //if (chord == 1) *fout << ">" << chord_out;
  if (tuplet == 1) *fout << "}";


  /* output one last thing and close file stream*/
  *fout << endl << "}" << endl;
  fout->close();
}
//=================================================================
//=================================================================
 

